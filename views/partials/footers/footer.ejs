
<!-- Loaded audio, only if running the new message check logic -->
<% if (typeof user !== "undefined") { %>
  <audio id="newMessageDing" src="/static/sounds/alert.mp3" preload="auto">
<% } %>

<script type="text/javascript">

  // ALERTS SECTION //
  // Global to make sure that alert sound only played once per screen
  window.alertDingSoundPlayedAlready = false;

  // Hide alerts after a moment
  setTimeout(function () { $(".alerts").slideUp("slow"); }, 3000);

  // Auto checking if there are new messages across any conversation
  <% if (typeof user !== "undefined") { %>
    var setSecondInterval = 2000 * 10;
    // Auto check for if there is new content
    setInterval(function () {
      var cmid =  <%= user.cmid %>;

      // We need to pick which function to run, depending on whether on a convo page or not
      <% if (typeof client == "undefined" || typeof convo == "undefined") { %>
        checkForNewMessagesInAllConvos(cmid, function (res) {
          if (res) {
            addSuccessAlertBanner(res);
          } else {
            console.log("No new messages in all convos.");
          }
        });

      <% } else { %>
        var clid =  <%= client.clid %>;
        var convo = <%= convo.convid %>;
        checkForNewMessagesInThisConvo(cmid, clid, convo, function (res1) {
          if (res1) {
            addSuccessAlertBanner(res1);
          } else {
            console.log("No new messages in this convo.");
            checkForNewMessagesInAllConvos(cmid, function (res2) {
              if (res2) {
                addSuccessAlertBanner(res2);
              } else {
                console.log("No new messages in all convos.");
              }
            });
          }
        });
      <% } %>

    }, setSecondInterval);
  <% } %>

  function checkForNewMessagesInThisConvo (cmid, clid, convo, cb) {
    var url = "/cms/" + cmid + "/alerts/convos/" + convo;
    $.get(url)
    .done(function(res) {
      // Create an alert only if there is a new message
      if (res.newMessages) {
        var newAlert =  '<a href="/cms/' + cmid + '/cls/' + clid + '/convos/' + convo + '">' + 
                        'You received new messages in this conversation, click to view.' + 
                        '</a>';
        cb(newAlert);
      } else {
        cb(false);
      }
    })
    .fail(function(err) {
      console.log("Alerts check error: ", err);
    });
  };

  function checkForNewMessagesInAllConvos (cmid, cb) {
    var url = "/cms/" + cmid + "/alerts/";
    $.get(url)
    .done(function(res) {

      // Create an alert only if there is a new message
      if (res.newMessages) {
        var newAlert =  '<a href="/cms/' + cmid + '/">' + 
                        'You received new messages, click to view.' + 
                        '</a>';
        cb(newAlert);

      } else {
        cb(false);
      }
    })
    .fail(function(err) {
      logAlertReceived(err);
      console.log("Alerts check error: ", err);
    });
  };

  function addSuccessAlertBanner (internalHrefContent) {
    var alertBanner = '<div class="alerts" ' + 
                      'style="background-color:#00e500">' +
                      internalHrefContent +
                      '</div>';
    // Dump all the previous alerts showing
    $(".alerts").remove();
    // Now just add the new alert
    $("body").prepend(alertBanner);
    // And play a ding sound to alert user
    if (!alertDingSoundPlayedAlready) {
      alertDingSoundPlayedAlready = true;
      document.getElementById("newMessageDing").play();
      
      // Logging to see what is going on with CMID70 account 
      // Only once per page
      logAlertReceived("new_message");
    }
  };


  // EMBEDDED TOOLS SECTION //
  // Google analytics
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-74523546-1', 'auto');
  ga('send', 'pageview');


  // Render Crisp.im if user is logged in
  <% if (typeof user !== "undefined") { %>
    CRISP_WEBSITE_ID = "54a27220-22bc-4baa-9756-ce636cd6f3de";
    (function() {
      d = document;
      s = d.createElement("script");
      s.src="https://client.crisp.im/l.js";
      s.async=1;
      d.getElementsByTagName("head")[0].appendChild(s);
    })();
  <% } %>


  // KEENIO SECTION //
  // Keen.io
  !function(a,b){a("Keen","https://d26b395fwzu5fz.cloudfront.net/3.4.1/keen.min.js",b)}(function(a,b,c){var d,e,f;c["_"+a]={},c[a]=function(b){c["_"+a].clients=c["_"+a].clients||{},c["_"+a].clients[b.projectId]=this,this._config=b},c[a].ready=function(b){c["_"+a].ready=c["_"+a].ready||[],c["_"+a].ready.push(b)},d=["addEvent","setGlobalProperties","trackExternalLink","on"];for(var g=0;g<d.length;g++){var h=d[g],i=function(a){return function(){return this["_"+a]=this["_"+a]||[],this["_"+a].push(arguments),this}};c[a].prototype[h]=i(h)}e=document.createElement("script"),e.async=!0,e.src=b,f=document.getElementsByTagName("script")[0],f.parentNode.insertBefore(e,f)},this);

  // Keen.io tracking operations
  function createKeenClient () {
    var client = new Keen({
      projectId: "5750a91433e4063ccd5b6c7e",
      writeKey: "57bd2513349615cb4f61859fbecf3252d67cf5820f085ce7788892b314cc9399e2bfdc084c3b5f5c60712c4c48143e7f31a9eb9e78c0955228e3cf08304bb64fa4e725862dfee3ceb3bb3298600faa954e487950dbe49b2c353167d4ceaa785f"
    });
    return client;
  };

  // Add page event
  var keenRef = {
    startTime: new Date().getTime(),
    clientPageVisitEvent: {
      user: {
        first:  "<%= typeof user == 'undefined' ? null : user.first %>",
        middle: "<%= typeof user == 'undefined' ? null : user.middle %>",
        last:   "<%= typeof user == 'undefined' ? null : user.last %>",
        email:  "<%= typeof user == 'undefined' ? null : user.email %>",
        cmid:   "<%= typeof user == 'undefined' ? null : user.cmid %>"
      },
      referrer: document.referrer,
      URL:      document.URL,
      keen: {
        timestamp: new Date().toISOString()
      }
    }
  };

  // Send the event to Keen.io
  createKeenClient().addEvent("pageviews", keenRef.clientPageVisitEvent, function (err, res) { if (err) console.log(err); });

  // Event bind on page unload to notify Keen of page spent duration
  $(window).on("beforeunload", notifyKeenOfPageVisitDuration);
  document.body.addEventListener("mousedown", notifyKeenOfPageVisitDuration, true);

  // Bind exit button actions ot Keen.io call
  $(".exit").click(function () { notifyKeenOfUserAction("cardexit"); });

  // Bind message check button actions ot Keen.io call
  $("#navbarMessageCheckButton").click(function () { notifyKeenOfUserAction("messagecheck"); });

  // Tool to notify keen of duration
  function notifyKeenOfPageVisitDuration () {
    // Duration maxes out at 15 minutes
    keenRef.clientPageVisitEvent.duration = Math.min((new Date().getTime() - keenRef.startTime), 900000);
    // Make the event call to Keen.io
    createKeenClient().addEvent("pagedurations", keenRef.clientPageVisitEvent, function (err, res) { 
      // In callback reset startTime
      keenRef.startTime = new Date().getTime();
    });
  };

  function notifyKeenOfUserAction (name) {
    createKeenClient().addEvent(name, keenRef.clientPageVisitEvent, function (err, res) { 
      if (err) { console.log(err); }
    });
  };

  function logAlertReceived (response) {
    try {
      var cmReceivedAlert = {
        user: {
          first:    "<%= typeof user == 'undefined' ? null : user.first %>",
          last:     "<%= typeof user == 'undefined' ? null : user.last %>",
          email:    "<%= typeof user == 'undefined' ? null : user.email %>",
          cmid:     "<%= typeof user == 'undefined' ? null : user.cmid %>",
          response: JSON.stringify(response)
        },
        keen: {
          timestamp: new Date().toISOString()
        }
      };

      createKeenClient()
      .addEvent("alerts_received", cmReceivedAlert, function (err, res) {
        if (err) {
          console.log(err);
        }
      });
    } catch (e) {
      console.log(e);
    }
  }

</script>

</body>

