<% include ../partials/headers/header-base %>
<% include ../partials/headers/header-navbar %>

<!-- EJS rendering reference variables -->
<% var adminCt = 0; %>
<% var staffCt = 0; %>

<!-- Update EJS variables post some addition calcs -->
<% for (var i = 0; i < cms.length; i++) { if (cms[i].admin && cms[i].active) { adminCt += 1; }; } %>
<% for (var i = 0; i < cms.length; i++) { if (!cms[i].admin && cms[i].active) { staffCt += 1; }; } %>

<!-- Additional libraries, loaded via CDN -->
<!-- TO DO: If we are sticking with C3js, then let's NPM install (or Bower) -->
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.10/c3.min.css">

<div class="contents orgoverview">

  <div class="title">
    <%= org.name %> Organization Overview
    <a href="/stats">
      <span class="right-button">
        <i class="fa fa-bar-chart"></i>
        Overall Statistics
      </span>
    </a>
  </div>

  <!-- Org overall messaging activity chart -->
  <div class="chart"><div id="chart-overall"></div></div>

  <div class="orgcard">
    <div class="left">
      <big><b><%= org.name %></b></big>
      <div class="bar"></div>
      <table style="width:100%">
        <tr>
          <td>Email</td>
          <td><%= org.email %></td>
        </tr>

        <tr>
          <td>Allotment</td>
          <td>
            <%= org.allotment %> users 
            <i>
              <% try { %>
                (<%= Number(org.allotment) - Number(cms.length) %> remaining)
              <% } catch (err) { %>
                (error calculating remaining)
              <% } %>
            </i>
          </td>
        </tr>

        <tr>
          <td>Created</td>
          <td>
            <% try { %>
              <% var upd = new Date(org.created); %>
              <%= [upd.getMonth()+1, upd.getDate(), upd.getFullYear()].join("/") %>
            <% } catch (err) { %>
              Unknown
            <% } %>
          </td>
        </tr>

        <tr>
          <td>Expires</td>
          <td>
            <% try { %>
              <% var upd = new Date(org.expiration); %>
              <%= [upd.getMonth()+1, upd.getDate(), upd.getFullYear()].join("/") %>
            <% } catch (err) { %>
              Unknown
            <% } %>
          </td>
        </tr>
      </table>

    </div>
    <div class="right">
      <div id="gaugechart"></div>
      Current week's usage compared with peak week
    </div>
  </div>


  <!-- Accounts activity overview columns -->
  <div class="accounts">
    <div class="title">
      Admin Accounts (<%= adminCt %> active)
    </div>

    <% for (var i = 0; i < cms.length; i++) { %>
      <% if (cms[i].admin && cms[i].active) { %>

        <div class="accountcard">

          <b>
          <% if (user.cmid !== cms[i].cmid) { %>
            <a href="/admin/cms/<%= cms[i].cmid %>">
              <%= cms[i].last %>, <%= cms[i].first %> <%= cms[i].middle %>
            </a>
          <% } else { %>
            <a href="/cms/<%= cms[i].cmid %>">
              <%= cms[i].last %>, <%= cms[i].first %> <%= cms[i].middle %>
            </a>
          <% } %>
          </b>

          <!-- Mini chart of activity -->
          <div class="miniaccountchart"><div id="chart-<%= cms[i].cmid %>"></div></div>

          <table style="width:100%">
            <tr>
              <td>Email</td>
              <td><%= cms[i].email %></td>
            </tr>

            <tr>
              <td>Position</td>
              <td><%= cms[i].position %></td>
            </tr>

            <tr>
              <td>Department</td>
              <td><%= cms[i].department %></td>
            </tr>

            <tr>
              <td>Last Login</td>
              <td>
                <% try { %>
                  <% var upd = new Date(cms[i].updated) %>
                  <%= [upd.getMonth()+1, upd.getDate(), upd.getFullYear()].join("/") + " at " + [upd.getHours(), upd.getMinutes()].join(':') %>
                <% } catch (err) { %>
                  Unknown
                <% } %>
              </td>
            </tr>

            <tr>
              <td>Created</td>
              <td>
                <% try { %>
                  <% var upd = new Date(cms[i].created) %>
                  <%= [upd.getMonth()+1, upd.getDate(), upd.getFullYear()].join("/") + " at " + [upd.getHours(), upd.getMinutes()].join(':') %>
                <% } catch (err) { %>
                  Unknown
                <% } %>
              </td>
            </tr>
          </table>
        </div>
      <% } %>
    <% } %>
          
  </div>

  <div class="accounts">
    <div class="title">
      Staff Accounts (<%= staffCt %> active)
    </div>

    <div id="cmactivitychart"></div>

    <% for (var i = 0; i < cms.length; i++) { %>
      <% if (!cms[i].admin && cms[i].active) { %>

        <div class="accountcard">

          <b>
          <% if (user.cmid !== cms[i].cmid) { %>
            <a href="/admin/cms/<%= cms[i].cmid %>">
              <%= cms[i].last %>, <%= cms[i].first %> <%= cms[i].middle %>
            </a>
          <% } else { %>
            <a href="/cms/<%= cms[i].cmid %>">
              <%= cms[i].last %>, <%= cms[i].first %> <%= cms[i].middle %>
            </a>
          <% } %>
          </b>

          <!-- Mini chart of activity -->
          <div class="miniaccountchart"><div id="chart-<%= cms[i].cmid %>"></div></div>

          <table style="width:100%">
            <tr>
              <td>Email</td>
              <td><%= cms[i].email %></td>
            </tr>

            <tr>
              <td>Position</td>
              <td><%= cms[i].position %></td>
            </tr>

            <tr>
              <td>Department</td>
              <td><%= cms[i].department %></td>
            </tr>

            <tr>
              <td>Last Login</td>
              <td>
                <% try { %>
                  <% var upd = new Date(cms[i].updated) %>
                  <%= [upd.getMonth()+1, upd.getDate(), upd.getFullYear()].join("/") + " at " + [upd.getHours(), upd.getMinutes()].join(':') %>
                <% } catch (err) { %>
                  Unknown
                <% } %>
              </td>
            </tr>

            <tr>
              <td>Created</td>
              <td>
                <% try { %>
                  <% var upd = new Date(cms[i].created) %>
                  <%= [upd.getMonth()+1, upd.getDate(), upd.getFullYear()].join("/") + " at " + [upd.getHours(), upd.getMinutes()].join(':') %>
                <% } catch (err) { %>
                  Unknown
                <% } %>
              </td>
            </tr>
          </table>
        </div>
      <% } %>
    <% } %>
          
  </div>




  <div class="accounts">
    <div class="title">
      Create New Account
    </div>
    <table>
      <form method="post">

        <input type="hidden" name="orgid" value="<%= org.orgid %>">

        <tr>
          <td>First</td>
          <td>
            <input class="infoblock-input" type="text" name="first" placeholder="e.g. Jane" required>
          </td>
        </tr>

        <tr>
          <td>Middle</td>
          <td>
            <input class="infoblock-input" type="text" name="middle" placeholder="e.g. M">
          </td>
        </tr>

        <tr>
          <td>Last</td>
          <td>
            <input class="infoblock-input" type="text" name="last" placeholder="e.g. Doe" required>
          </td>
        </tr>

        <tr>
          <td>Email</td>
          <td>
            <input class="infoblock-input" type="email" name="email" placeholder="e.g. jane@example.com" required>
          </td>
        </tr>

        <tr>
          <td>Password</td>
          <td>
            <input class="infoblock-input" type="password" name="password" placeholder="•••••••" required>
          </td>
        </tr>

        <tr>
          <td>Position</td>
          <td>
            <input class="infoblock-input" type="text" name="position" placeholder="e.g. Therapist" required>
          </td>
        </tr>

        <tr>
          <td>Department</td>
          <td>
            <input class="infoblock-input" type="text" name="department" placeholder="e.g. Pretrial Services" required>
          </td>
        </tr>

        <tr>
          <td>Admin Privelages</td>
          <td>
            <label class="infoblock-cblabel"><input type="checkbox" name="admin" value="true"> check for admin privileges </label>
          </td>
        </tr>

        <tr>
          <td>Submit</td>
          <td>
            <input type="submit" class="button" value="Submit">
          </td>
        </tr>
        
      </form>
    </table>
  </div>


</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.10/c3.min.js"></script>

<script type="text/javascript">

  // Instantiate Keen.io
  
  // Bind to the global
  window.msgs = "<%= JSON.stringify(msgs) %>";
  window.msgsReduced = null;


  // UTILS: Function utilities called in the above "try" statement

  // Returns the ISO week of the date
  // Source credit: http://weeknumber.net/how-to/javascript
  Date.prototype.getWeek = function() {
    var date = new Date(this.getTime());
     date.setHours(0, 0, 0, 0);
    // Thursday in current week decides the year.
    date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
    // January 4 is always in week 1.
    var week1 = new Date(date.getFullYear(), 0, 4);
    // Adjust to Thursday in week 1 and count number of weeks from date to week1.
    return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000
                          - 3 + (week1.getDay() + 6) % 7) / 7);
  };

  // Makes the mini charts by each name
  function makeChart (id) {
    var dates = msgs[id].dates;
    var vals = msgs[id].vals;
    var d = new Date();
    var today = [d.getFullYear(), d.getMonth()+1, d.getDate()].join("-");

    if (dates[dates.length] !== today) {
      dates.push(today);
      vals.push("0");
    }

    chart = c3.generate({
      data: { 
        x: "x", 
        columns: [["x"].concat(dates), ["Messages"].concat(vals)], 
        color: function (color, d) { return "#4BAEFF"; }
      },
      axis: { x: { type: "timeseries", tick: { format: "%Y-%m-%d" }, show: false }, y: { show: false, max: 30, min: 0 } },
      tooltip: { show: true },
      point: { show: false },
      legend: { hide: true },
      grid: { y: { show: false }, x: { show: false } },
      padding: { top: 0, right: 0, bottom: -25, left: 0, },
      size: { height: 40, width: 260 },
      bindto: "#chart-" + id,
    }); 
  };

  function reduceAllMsgHistories (msgs) {
    // Object to be returned
    var dates = {};

    // Iterate through list of cms's msgs history
    Object.keys(msgs).forEach(function (cm) {
      for (var i = 0; i < msgs[cm].dates.length; i++) {
        var d = msgs[cm].dates[i];
        var v = msgs[cm].vals[i];
        if (!dates[d]) { dates[d] = 0; }
        dates[d] += Number(v);
      }
    });

    // Add today if it does not exist
    // TO DO: Weigh merits of this existing, primarily for dev environ
    var d = new Date();
    var today = [d.getFullYear(), d.getMonth()+1, d.getDate()].join("-");
    if (!dates[today]) { dates[today] = 0; }

    return dates;
  };

  // Top big chart that combines all msg histories
  function makeTopOrgWideChart (dates) {
    var keys = Object.keys(dates).sort(function (a,b) { return new Date(a) - new Date(b); });
    var vals = keys.map(function (k) { return dates[k]; })

    c3.generate({
      data: { 
        x: "x", 
        columns: [["x"].concat(keys), ["Daily Messaging Volume"].concat(vals)], 
        color: function (color, d) { return "#4BAEFF"; },
        types: {"Daily Messaging Volume": "area"}
      },
      legend: { hide: true },
      axis: { x: { type: "timeseries", tick: { format: "%m/%d" } } },
      padding: { right: 20, top: 20 },
      size: { width: 830, height: 230 },
      grid: { y: { show: false }, x: { show: false } },
      bindto: "#chart-overall"
    });
  };

  // Create a gauge
  // Why do this? Incentive for supervisors to drive towards increased use
  function drawGaugeChart (dates) {
    var weeks = {};

    // Convert dates array into weeks with week counts for each
    for (var dt in dates) { 
      var weekNum = "week_" + String(new Date(dt).getWeek()); 
      if (!weeks.hasOwnProperty(weekNum)) weeks[weekNum] = {count: 0};
      var ct = Number(dates[dt]);
      if (!isNaN(ct)) weeks[weekNum].count += ct;
    }

    // Get the highest performing weeek
    var highestCount = weeks[Object.keys(weeks).reduce(function(a, b){ return weeks[a].count > weeks[b].count ? a : b })].count;
    var thisWeeksVal = weeks["week_" + String(new Date().getWeek())].count;
    var prctgeOfPeak = Math.floor(((thisWeeksVal/highestCount)*1000))/10

    c3.generate({
        data: {
          columns: [ ["Proportion of Peak", prctgeOfPeak] ],
          type: "gauge",
        },
        color: {
          pattern: ["#FF0000", "#F97600", "#F6C600", "#60B044"], // Color levels for the percentage values
          threshold: { values: [30, 60, 90, 100] }
        },
        size: { height: 138, width: 415 },
        bindto: "#gaugechart"
    });
  };

  function drawCMActivityChart(cms) {
    cms = cms.result;
    // Convert all times to hours
    cms = cms.filter(function (ea) {
      var f = ea["user.first"] !== "" && ea["user.first"] !== "Test Account" && ea["user.first"] !== "Kuan";
      var l = ea["user.last"] !== "";
      return (f && l);
    }).map(function (ea) { 
      // Why 5.5? Arbitrary reduction to make typically high performing CMs who are clicking on stuff on the main screen appear to be at 8 hoours
      // TO DO: Fix the duration calculator
      ea["Recent Hours Logged Using ClientComm"] = Math.ceil((ea.result/(1000*60*60))*100)/100; 
      ea.name = [ea["user.first"], ea["user.last"]].join(" ");
      return ea;
    });
    console.log(cms)

    c3.generate({
      data: {
        json: cms,
        keys: {
          x: "name",
          value: ["Recent Hours Logged Using ClientComm"]
        },
        type: "bar",
        color: function (color, d) { return "#4BAEFF"; }
      },
      axis: {
        rotated: true,
        x: { type: "category" }
      },
      bindto: "#cmactivitychart"
    });
  }


  // PAGE LOAD ACTIONS RELATED TO EJS VAR STRING INCLUSION
  // Attempt first to parse content
  try {
    // Clean up EJS string output
    msgs = JSON.parse(msgs.replace(/&#34;/g, '"'));
    msgsReduced = reduceAllMsgHistories(msgs);

    // Iterate through each and use that ID as the indicator same as each case manager's cmid
    Object.keys(msgs).forEach(function (ea) { makeChart(ea); });

    // Make the cumulative, organization-wide top chart
    makeTopOrgWideChart(msgsReduced);

    // Draw gauge chart in top card right
    drawGaugeChart(msgsReduced);

  // If parse fails, we don't execute any of the chart drawing
  } catch (e) { console.log(e) }

  // KEEN ANALYTICS
  // Load Keen.io data only after page loads because Keen.io is loaded in the footer from template
  $(document).ready(function () {
    var keenQueryClient = new Keen({
      projectId: "5750a91433e4063ccd5b6c7e",
      readKey: "a70db21e3f6527c10ee23f2697714bf883783b6018b8f3fd27d94bf0b0d9eb9cb26a22d69709dff266866c526ad0e9e845c82dd5393b417d99c2ef7712d979a960e9247806dc09231e9ff7880ab2772cfa1b41d9900de385db8d5942d4d337bd"
    });

    Keen.ready(function(){
      // Create a query instance
      var keenQuery = new Keen.Query("sum", {
        eventCollection: "pagedurations",
        groupBy: [ "user.first", "user.last" ],
        targetProperty: "duration",
        timeframe: "previous_1_days",
        timezone: "UTC"
      });

      // Send off query
      keenQueryClient.run(keenQuery, function (err, res){
        if (err) { console.log("Keen error on query run: ", err); }
        else { drawCMActivityChart(res); }
      });

    });
  });

</script>

<% include ../partials/footers/footer %>
